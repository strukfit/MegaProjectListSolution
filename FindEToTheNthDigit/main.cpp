#include <iostream>
#include <math.h>

// E number to 10000 decimal places
#pragma region E_number

const std::string E_NUMBER = "2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642789066515033503277717835019361869891256071760605886116467109405077541002256983155200055935729725716362695618386287593015492500474119219062592032319156413057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533226128310657936320933346794155957248509530762985383922174322466519048996553865957931545263887267572876643675399871569958448412627943563079228656625516261469457062956254635858967702881103041196553750770265044369347803312237918864272321014758485648920601678910302409462249229903901778521035617889302462475473777758246822703785325020373552059229491181519199278643152156494352191227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960874725481364666682080549198931460881918969826799441525676644042981745803127876095863122560518068964285376183765120386060509043927186915380231310873922961209202550028447108606692155521005048588169152308355133105300445275561594031403349949233446046356159551543417745124456551289445590421207373026201270771218621378389315377747981533223515110811975758181600061225733377347123365250947319362850480552217736768825852778282243306885153501869112948165983925810433848104241140783149472514065238698432969008020196015640825887370860164873627620444150068207041937615845471231834600726293395505482395571372568402322682130124767945225863967279554564632611218132350568890148045987027400400652185105183694530030356327192256097883936292153595844316442065322761225487786105739778841006661466509455559323865428363764804118372494894212033734470266829715654631232333599801381047824679684115956305301392106559923863304740096479704047720106923909717167340317450031907037202497480750494703501499344783160155473604528610360226691116592099708064846255264545658517352384267601550971638794317119687348468873818665675127929857501636341131814808361854129740383507775013570247046101757160586356401418420692070564599522867121410594330793491029910574713324731176370614641061456224927144951405607833486430914466780637110148502586586557055269049652098580338507224264829397285300266014337823089830725235206711017378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361844651430038412734658557969725415010132694102691835601891047026873745577755067652165922984569023715745664395515741536319319198107057533663373803827215279884935039748001589051942087971130805123393322190346671954370813952622422105124636675505211228731064975442019470045519466318602044162323448575559948976607667276726403665791438435572277941044012119387027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608747254813646666820805491989314608819189698267994415256766440429817458031278760958631225605180689642853761837651203860605090439271869153802313108739229612092025500284471086066921555210050485881691523083551331053004452755615940314033499492334460463561595515434177451244565512894455904212073730262012707712186213783893153777479815332235151108119757581816000612257333773471233652509473193628504805522177367688258527782824330681757781643651047595554126798555163303835008484440687595896284634151017972681136576858338461670155297619636573217214772350141441973568548161361157352552133475741849468438523323907394143334547762468010139057278710165129666367644518724605983867456269313481305950360146876346653417024099438190616525048793116880588188650577105088162543655307361931676080452024968780033626745892390462369836314310186264481412441232326307471156067835980186704515709858387410597885";

#pragma endregion

int main()
{
	int n;

	std::cout << "Enter a number(up to 10.000) and have the program generate PI up to that many decimal places: ";

	std::cin >> n;

	if (n > 10000)
	{
		std::cout << "The number is bigger than 10.000\n";
	}
	else if (n < 0)
	{
		std::cout << "The number is smaller than 0\n";
	}
	else if (n == 0)
	{
		std::cout << "3\n";
	}
	else
	{
		std::cout << E_NUMBER.substr(0, n + 2) << std::endl;
	}

	return 0;
}